/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
module.exports = {
    'env': {
        'browser': true,
        'es6': true,
        'node': true
    },
    'parser': '@typescript-eslint/parser',
    'parserOptions': {
        'project': 'tsconfig.json',
        'sourceType': 'module'
    },
    'plugins': [
        '@angular-eslint/eslint-plugin',
        '@typescript-eslint'
    ],
    'rules': {
        '@angular-eslint/component-class-suffix': 'error',
        '@angular-eslint/component-selector': [
            'off',
            {
                'type': 'element',
                'prefix': [
                    'app',
                    'mpi'
                ],
                'style': 'kebab-case'
            }
        ],
        '@angular-eslint/directive-class-suffix': 'error',
        '@angular-eslint/directive-selector': [
            'off',
            {
                'type': 'attribute',
                'prefix': [
                    'app',
                    'mpi',
                    'tm'
                ],
                'style': 'camelCase'
            }
        ],
        '@angular-eslint/no-host-metadata-property': 'error',
        '@angular-eslint/no-inputs-metadata-property': 'error',
        '@angular-eslint/no-output-rename': 'error',
        '@angular-eslint/no-outputs-metadata-property': 'error',
        '@angular-eslint/use-lifecycle-interface': 'error',
        '@angular-eslint/use-pipe-transform-interface': 'error',
        '@typescript-eslint/consistent-type-definitions': 'error',
        '@typescript-eslint/dot-notation': 'off',
        '@typescript-eslint/explicit-member-accessibility': [
            'off',
            {
                'accessibility': 'explicit'
            }
        ],
        'keyword-spacing': ['error', { 'after': true, 'before': true }],
        'space-before-blocks': ['error', { 'functions': 'always', 'keywords': 'always', 'classes': 'always' }],
        '@typescript-eslint/indent': [
            'error',
            4,
            {
                'ObjectExpression': 'first',
                'FunctionDeclaration': {
                    'parameters': 'first'
                },
                'FunctionExpression': {
                    'parameters': 'first'
                },
                'SwitchCase': 1,
                'ArrayExpression': 'first'
            }
        ],
        '@typescript-eslint/member-delimiter-style': [
            'error',
            {
                'multiline': {
                    'delimiter': 'semi',
                    'requireLast': true
                },
                'singleline': {
                    'delimiter': 'semi',
                    'requireLast': false
                }
            }
        ],
        '@typescript-eslint/no-empty-function': 'off',
        '@typescript-eslint/no-empty-interface': 'error',
        '@typescript-eslint/no-inferrable-types': [
            'error',
            {
                'ignoreParameters': true
            }
        ],
        '@typescript-eslint/prefer-function-type': 'error',
        '@typescript-eslint/quotes': [
            'error',
            'single'
        ],
        '@typescript-eslint/semi': [
            'error',
            'always'
        ],
        '@typescript-eslint/type-annotation-spacing': 'error',
        '@typescript-eslint/unified-signatures': 'error',
        'brace-style': [
            'error',
            '1tbs',
            { 'allowSingleLine': true }
        ],
        'object-curly-spacing': ['error', 'always'],
        'curly': 'error',
        'comma-spacing': ['error', { 'before': false, 'after': true }],
        'dot-notation': 'off',
        'eol-last': 'error',
        'eqeqeq': [
            'error',
            'smart'
        ],
        'guard-for-in': 'off',
        'id-blacklist': 'off',
        'id-match': 'off',
        'max-len': [
            'off',
            {
                'code': 140
            }
        ],
        'no-bitwise': 'error',
        'no-caller': 'error',
        'no-console': [
            'error',
            {
                'allow': [
                    'debug',
                    'info',
                    'dirxml',
                    'warn',
                    'dir',
                    'time',
                    'timeEnd',
                    'timeLog',
                    'trace',
                    'assert',
                    'clear',
                    'count',
                    'countReset',
                    'group',
                    'groupCollapsed',
                    'groupEnd',
                    'table',
                    'Console',
                    'markTimeline',
                    'profile',
                    'profileEnd',
                    'timeline',
                    'timelineEnd',
                    'timeStamp',
                    'context'
                ]
            }
        ],
        'no-debugger': 'error',
        'no-empty': 'off',
        'no-empty-function': 'off',
        'no-eval': 'error',
        'no-fallthrough': 'error',
        'no-new-wrappers': 'error',
        'no-redeclare': 'error',
        'no-restricted-imports': 'error',
        'no-throw-literal': 'error',
        'no-trailing-spaces': 'error',
        'no-underscore-dangle': 'off',
        'no-unused-labels': 'error',
        'no-var': 'error',
        'prefer-const': ['error', {
            'destructuring': 'any',
            'ignoreReadBeforeAssign': false
        }],
        'prefer-arrow-callback': [
            'error',
            { 'allowUnboundThis': true, 'allowNamedFunctions': true }
        ],
        'space-before-function-paren': [
            'error',
            {
                'anonymous': 'always',
                'named': 'never',
                'asyncArrow': 'always'
            }
        ],
        'quotes': ['error', 'single'],
        'radix': 'error',
        'semi': 'error',
        'spaced-comment': [
            'error',
            'always',
            {
                'markers': [
                    '/'
                ]
            }
        ],
        'array-bracket-spacing': [
            'error',
            'never',
            {
                'singleValue': false,
                'objectsInArrays': false,
                'arraysInArrays': false
            }
        ],
        'no-irregular-whitespace': ['error', { 'skipComments': true }],
        'no-multi-spaces': 'error'
    }
};
